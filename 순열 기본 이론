<순열 기본 이론>
** 순열(permutation)
 - 1 ~ N까지로만 이루어진 순열을 의미
 - 크기는 항상 N이 되어야 하고, 겹치는 숫자가 없어야 함
ex) 1, 2, 3
    4, 1, 3, 2
    5, 4, 2, 3, 1
 - 크기가 N인 순열은 총 N!개 존재
 - 순열을 사전순으로 나열 했을 때 N=3인 경우에 사전 순은 다음과 같다
   1 2 3
   1 3 2
   2 1 3
   2 3 1
   3 1 2
   3 2 1
 
 *사전순이란? 
  문자열 비교에 사용하는 방법으로, 작거나 큰게 나올때까지 계속 비교하는 방법을 말한다.
  ex) "호랑이", "호랑휘" --> "호랑"까지는 같고, "이" 가 "휘" 보다 더 앞에 있으므로, "호랑이" 가 우선이다!
  
** 다음 순열(next_permutation)
 순열을 사전순으로 나열했을 때, 사전순으로 다음에 오는 순열을 "다음 순열" 이라고 함
 C++ 같은 경우, 라이브러리 존재. (Next_permutation / prev_permutation )
 
**다음 순열을 라이브러리를 사용하지 않고 구현하는 방법
 - A[i-1] < A[i]를 만족하는 가장 큰 i를 찾는다
 - j >= i 이면서 A[j] > A[i-1]를 만족하는 가장 큰 j를 찾는다
 - A[i-1] 과 A[j]를 swap 한다
 - A[i]부터 순열을 뒤집는다
 
 예시와 함께 적용시켜 보자!
 ex) 7 2 3 6 5 4 1
 
 1단계: A[i-1] < A[i]를 만족하는 가장 큰 i를 찾는다 
              오른쪽부터 확인했을때, 만족하는 경우가 3 과 6인 경우! 따라서 A[i-1]은 3!
 
 2단계: j >= i 이면서 A[j] > A[i-1]를 만족하는 가장 큰 j를 찾는다
       3보다 큰 숫자 이면서, 가장 오른쪽에 있는 숫자를 찾아야 한다
              그 숫자는 4!
 
 3단계: A[i-1] 과 A[j]를 swap 한다
 		3과 4를 바꾼다!
 		7 2 3 6 5 4 1 전
 		7 2 4 6 5 3 1 후
 
 4단계: A[i]부터 순열을 뒤집는다
 	   7 2 4 6 5 3 1 전
 	   7 2 4 1 3 5 6 후
 	   
 즉 결과적으로 처음 7 2 3 6 5 4 1의 다음 순열은 
               7 2 4 1 3 5 6이 됨을 알 수 있다
 
 - 이전 순열은 다음 순열의 부등호를 바꿔서 계산하면 된다
 
  
 
 
 		             
      
   
