 <힙 이론>
 힙이란 무엇일까? 힙을 알아보기에 앞서서 두가지 트리 구조에 대해서 알아보고 가자
 ** Perfect Binary Tree                              1
  - 리프노드를 제외한 노드의 지식의 수: 2                 2    3
  - 리프노드의 자식의 수: 0                          4  5  6  7
  - 모든 리프 노드의 depth가 같아야 함                                            depth = 3 
  - 높이가 h인 트리의 노드 개수 =  2^h-1
 
 ** Complete Binary Tree
  - 리프노드를 제외한 자식의 수: 2                                     1
  - 리프 노드의 자식의 수: 0                                       2     3
  - 마지막 레벨에서는 노드가 일부 없을 수 있음                                               4   5 
  - 오른쪽에서부터 몇 개가 사라진 형태
  - Perfect Binary Tree도 Complete Binary tree 중 하나                          1
													          2     3
													        4   5 6   
  - complete Binary Tree에 node가 왼쪽에서 오른쪽으로 차례대로 추가되기 때문에,
       보통 배열에 저장을 하는게 효율적.
       
  다시 돌아와서, 힙은 Complete Binary Tree를 의미한다.
  힙은 크게 Max-heap과, Min-heap으로 나눠 지는데, 어떤 힙인지 한번 알아보자
 
 ** Max-heap(최대 힙)												9
  - Max-heap에서 가장 큰 값은 루트에 들어가 있다.                     7    6
  - N개가 heap에 들어가 있으면 높이는 logN이 된다. 					2  3 4  5			
  
  * 최대 힙 삽입
  - 가장 마지막 위치에 새로운 수를 넣는다
  - 그 수와 parent를 계속해서 비교해가면서 루트 < 자식 이면 swap
  - 예시를 통해 힙 삽입을 수행해 보자.(삽입 숫자 - 5)
	 	4			 4          5
	  3   1   -->  5  1 -->   4   1
	2  5         2  3       2  3

  * 최대 힙 제거
  - 루트를 가장 작은 값과 swap**
  - children과 비교하면서 아래로 내려감
  - Max-Heap 이기 때문에, 루트 > children을 만족하려면 4와 1을 바꿔야 함
  - 
	  	 5			1			4			4
	  4	  2 --> 4	  2 -->  3	   2 --> 1 	   2
	2   3 1  	2	3	  2		1     2    3	 

  - 힙에서 삽입과 제거는 위로만 올라가거나(삽입), 밑으로만 내려오거나(제거) 하기 때문에
        복잡도는 O(lgN)
  - 이러한 힙 구조는 Java의 priorityQueue 라는 자료구조 class 제공
  - 최소 힙의 구현은 최대 힙의 부등호를 전부 반대로 구현
  - 힙으로 알고리즘을 구현하면 O(N^2) -> O(NlgN)으로 줄어드는 효과를 가져옴
  - 모든 수를 힙에다 넣었다가 뺀 정렬은 "힙 소트", 이의 복잡도는 Nlg(N)으로 구현 가능
      
   
   

 
 
 
 				      